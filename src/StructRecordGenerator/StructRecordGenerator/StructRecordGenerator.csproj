<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>9.0</LangVersion>
    <Nullable>enable</Nullable>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <RootNamespace>StructRecordGenerators</RootNamespace>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.8.0" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0" />
  </ItemGroup>

  <PropertyGroup>
    <PackageId>StructRecordGenerator</PackageId>
    <Authors>Sergey Teplyakov</Authors>
    <PackageLicenseUrl>https://github.com/SergeyTeplyakov/StructRecordsGenerator/blob/main/LICENSE</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/SergeyTeplyakov/StructRecordsGenerator</RepositoryUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Description>A set of source generators for creating struct-based "records".</Description>
    <Version>0.4.2</Version>
    <PackageReleaseNotes>
      0.4.2
      * Generate correct ToString implementation for records with primary constructors.
      0.4.1
      * Disable nullability context in the generated ToString
      0.4.0
      * Equality works with classes as well.
      * Rename some generators.
      0.3.1
      * ToStringGenerator now supports records as well.
      0.3.0
      * Add ToStringBehavior that controls the way a member is represented in ToString method.
      * Add an ability to print the collection's content and count with an ability to limit the number of elements printed.
      * Add an upper bound for the string representation provided by ToString method.
      0.2.0
      * Implement `StructRecordGenerator`
      * Implement `ToStringGenerator`
      0.1.0
      * Implement `StructEqualityGenerator`.
    </PackageReleaseNotes>
    <Copyright>Copyright Sergey Teplyakov</Copyright>
    <PackageTags>source generators</PackageTags>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <DevelopmentDependency>true</DevelopmentDependency>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_GetFilesToPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <PropertyGroup>
    <DebugType>embedded</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <ItemGroup>
    <None Update="tools\*.ps1" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Code\GenerateEqualityAttribute.cs">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Compile>
    <Compile Update="Code\ToStringGenerationHelper.cs">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Compile>
    <Compile Update="Code\GenerateToStringAttribute.cs">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Compile>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

    <Target Name="_GetFilesToPackage">
    <ItemGroup>
      <_File Include="$(OutputPath)$(AssemblyName).dll" />

      <TfmSpecificPackageFile Include="@(_File)" PackagePath="analyzers/dotnet/cs/%(_File.RecursiveDir)%(_File.FileName)%(_File.Extension)" />
    </ItemGroup>
  </Target>

</Project>
